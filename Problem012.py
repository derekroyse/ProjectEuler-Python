# Author: Derek Royse
# Project Euler - Problem 012:
# 
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import math

divisors = 500
currentNumber = 1
answer = 0

def findNextTriangular(x):
    return int((x*(x+1))/2)
    
def getFactors(x):
    tempArray = []
    global answer
    
    # every composite number has a prime factor less than or equal to its square root
    for i in range(1,int(math.sqrt(x+1))):
        if x % i == 0:
            tempArray.append(i)
    # we only need to know half of the divisors; the other half is just the mirror
    if len(tempArray) > divisors/2:
        answer = x
        return        
 
while answer == 0:
    getFactors(findNextTriangular(currentNumber))
    currentNumber += 1    

print(answer)